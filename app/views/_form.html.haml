:ruby
  model_name = grid.model.model_name.singular
  columns = grid.columns.dup.delete_if {|x| x.name.to_s == 'id' }
  datepicker_str = ''
  object = grid.model.new
  is_new = params["action"] === 'wulin_master_new_form'
  type = is_new ? 'new' : 'edit'
  title = (is_new ? 'Create new' : 'Update') + " #{model_name.titleize}"
  action = is_new ? 'create' : 'update'
.create_form{:id => "#{grid.name}_form", :title => title, data: {action: action}}
  = form_for object, :url => grid.path do |form|
    = hidden_field_tag :grid, grid.class.to_s
    = hidden_field_tag :screen, screen.class.to_s
    .base_error
    - columns.each do |column|
      - if send("#{type}_form_able?", column)
        :ruby
          column_name = get_column_name(column)
          label = column.options[:form_label] || column.label
          _klass = model_name.classify
          field = column.options[:through] || column.name
        .field{:name => column_name}
          %label{:for => "#{model_name}_#{column_name}"}= label
          - if ['belongs_to', 'enum'].include?(column.sql_type.to_s)
            = form.select column_name,                                      |
              select_options(column),                                       |
              { include_blank: !column.presence_required? },                |
              :class             => 'chzn-select',                          |
              :style             => "width:250px",                          |
              :disabled          => column.options[:auto_fill],             |
              "data-required"    => column.presence_required?,              |
              "data-source"      => column.source,                          |
              "data-target"      => "#{column_name}_target_flag",           |
              "data-field"       => field                                   |

          - elsif column.sql_type.to_s == 'has_and_belongs_to_many' or column.sql_type.to_s == 'has_many'
            = form.select column.reflection.name.to_s,                       |
              select_options(column),                                        |
              { include_blank: !column.presence_required? },                 |
              :multiple          => true,                                    |
              :class             => 'chzn-select',                           |
              :style             => "width:250px",                           |
              "data-required"    => column.presence_required?,               |
              "data-source"      => column.source,                           |
              "data-target"      => "#{column_name}_target_flag",            |
              "data-field"       => field,                                   |
              :disabled          => column.options[:auto_fill]               |

          - elsif select_tag_field?(column)
            = select_tag "#{model_name}[#{column_name}]",                   |
              select_tag_options(column),                                   |
              :style             => "width:250px",                          |
              :class             => 'chzn-select',                          |
              :disabled          => column.options[:auto_fill],             |
              :include_blank     => !column.presence_required?,             |
              "data-required"    => column.presence_required?,              |
              "data-target"      => "#{column_name}_target_flag",           |
              "data-source"      => column.source,                          |
              "data-field"       => field                                   |
            - if column.options[:depend_column].present?
              :javascript
                $(function(){
                  var depend_select_id = "#{model_name}_#{column.options[:depend_column]}";
                  var depend_select = $("select#" + depend_select_id);

                  depend_select.on('change', function(){
                    var current_select_id = "#{model_name}_#{column_name}";
                    var current_select = $("select#" + current_select_id);
                    var key = $(this).val();
                    current_select.find("option").hide().trigger("liszt:updated");
                    current_select.val("").trigger("liszt:updated");
                    current_select.find("option[data-key='" + key + "']").show().css("display", "").trigger("liszt:updated");
                  });
                });

          - elsif column.sql_type.to_s == 'string'
            = form.text_field column_name, :class => "auto-complete-text-field-#{column_name}", :value => column.value(object), "data-target" => "#{column_name}_target_flag", "data-field" => field

            :javascript
              var choices = "/wulin_master/fetch_distinct_options?"
                                   + "column=#{column_name}"
                                   + "&grid=#{grid.class}"
                                   + "&klass=#{grid.model.name}"
                                   + "&screen=#{screen.class}"
                                   + "&source=#{column_name}";
              var container = $(".auto-complete-text-field-#{column_name}");
              var column = {
                auto_complete: true,
                width: container.width(),
                choices: choices
              };
              var args = {
                column: column,
                container: container
              };
              carbonCopyNewEditor = TextEditorForForm.bind({})
              carbonCopyNewEditor(args);

          - elsif column.options[:file]
            = form.file_field column_name, "data-target" => "#{column_name}_target_flag", "data-field" => field, :style => 'width: 250px'
          - elsif column.options[:password]
            = form.password_field column_name, "data-target" => "#{column_name}_target_flag", "data-field" => field, :style => 'width: 250px'
          - else
            - if column.sql_type.to_s.downcase == 'boolean'
              = form.check_box column_name, :readonly => column.options[:auto_fill], "data-target" => "#{column_name}_target_flag", "data-field" => field
            - elsif column.sql_type.to_s.downcase == 'text'
              = form.text_area column_name, :readonly => column.options[:auto_fill], "data-target" => "#{column_name}_target_flag", "data-field" => field, :style => 'width: 260px; height: 4em;'
            - else
              = form.text_field column_name, :style => 'width: 250px', :value => column.value(object), :readonly => column.options[:auto_fill], "data-target" => "#{column_name}_target_flag", 'data-date' => date_column?(column), 'data-datetime' => datetime_column?(column), 'data-time' => time_column?(column), "data-field" => field
          .field_error
    .submit
      - if is_new
        %input.btn.success{:id => "#{grid.name}_submit", :name => "commit", :type => "submit", :value => " Create "}/
        %input.btn{:id => "#{grid.name}_submit_continue", :name => "commit", :type => "submit", :value => " Create and Continue "}/
      - else
        %input.btn.success.update_btn{:id => "#{grid.name}_batch_update", :name => "commit", :type => "submit", :value => "  Update  "}/

:javascript
  $('##{grid.name}_form select[data-required="true"]').chosen();
  $('##{grid.name}_form select[data-required="false"]').chosen({allow_single_deselect: true});

  var dateNow = new Date();
  var yearNow = dateNow.getFullYear();

  var initInputmaskConfigForm = {
    yearrange: { minyear: 1900, maxyear: 2100 },
  };

  var initFlatpickrConfigForm = {
    allowInput: true,
    clickOpens: true,
    maxDate: '31/12/2100',
    minDate: '01/01/1900',
    onOpen: function(selectedDates, dateStr, instance) {
      instance.update(dateStr);
    },
  };

  // Datetime Picker

  var inputmaskConfigDateTime = $.extend({}, initInputmaskConfigForm, {
    alias: 'datetime',
    placeholder: 'dd/mm/' + yearNow + ' 12:00',
  });

  var flatpickrConfigDateTime = $.extend({}, initFlatpickrConfigForm, {
    enableTime: true,
    dateFormat: 'd/m/Y H:i',
  });

  Inputmask.extendAliases({ 'formDateTime': inputmaskConfigDateTime });
  $('input[data-datetime]').inputmask('formDateTime').flatpickr(flatpickrConfigDateTime);

  // Date Picker

  var inputmaskConfigDate = $.extend({}, initInputmaskConfigForm, {
    alias: 'date',
    placeholder: 'dd/mm/' + yearNow,
  });

  var flatpickrConfigDate = $.extend({}, initFlatpickrConfigForm, {
    dateFormat: 'd/m/Y',
  });

  Inputmask.extendAliases({ 'formDate': inputmaskConfigDate });
  $('input[data-date]').inputmask('formDate').flatpickr(flatpickrConfigDate);

  // Time Picker

  var inputmaskConfigTime = $.extend({}, initInputmaskConfigForm, {
    alias: 'hh:mm',
    placeholder: '12:00',
  });

  var flatpickrConfigTime = $.extend({}, initFlatpickrConfigForm, {
    noCalendar: true,
    enableTime: true,
    dateFormat: 'H:i',
    onOpen: function(selectedDates, dateStr, instance) {
      var time = dateStr || '12:00';
      instance.update(time);
    },
  });

  Inputmask.extendAliases({ 'formTime': inputmaskConfigTime });
  $('input[data-time]').inputmask('formTime').flatpickr(flatpickrConfigTime);
