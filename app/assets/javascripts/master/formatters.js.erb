(function($) {

  var REGEXP_BASE_DATE = '(\\d{4})\\-(\\d{2})\\-(\\d{2})';                           // 'yyyy-mm-dd'
  var REGEXP_BASE_TIME = '(\\d{2}):(\\d{2})';                                        // 'hh:mm'
  var REGEXP_DATE = '^' + REGEXP_BASE_DATE + '$';                                    // 'yyyy-mm-dd'
  var REGEXP_DATETIME = '^' + REGEXP_BASE_DATE + '[ \\t]' + REGEXP_BASE_TIME + '$';  // 'yyyy-mm-dd hh:mm'

  var SlickFormatter = {

    ///////////////////////////////////////////////////////////////////////////
    // Helpers
    ///////////////////////////////////////////////////////////////////////////

    applyStyle: function(value, style) {
      return value === null ? "" : "<span style='" + style + ";display:block'>" + value + "</span>";
    },

    // Convert datetime format
    convertDateTimeFormat: function(str, type) {
      try {
        var matchedArr;
        switch (type.toLowerCase()) {
          case 'date':  // 'dd/mm/yyyy'
            matchedArr = str.match(new RegExp(REGEXP_DATE));
            return matchedArr[3] + '/' + matchedArr[2] + '/' + matchedArr[1];
          default:      // 'dd/mm/yyyy hh:mm'
            matchedArr = str.match(new RegExp(REGEXP_DATETIME));
            return matchedArr[3] + '/' + matchedArr[2] + '/' + matchedArr[1] + ' ' + matchedArr[4] + ':' + matchedArr[5];
        }
      } catch (err) {
        return null;
      }
    },

    // Display Date/Time info
    dateTimeBaseFormatter: function(value, columnDef, type) {
      if (type.toLowerCase() === 'date') {
        var regExp = REGEXP_DATE;
      } else {
        var regExp = REGEXP_DATETIME;
      }

      if (value === null || value === '') {
        return '';
      } else {
        if (value.match(new RegExp(regExp))) {
          value = convertDateTimeFormat(value, type);
        }
        return applyStyle(value, columnDef.style || 'text-align:center');
      }
    },

    ///////////////////////////////////////////////////////////////////////////
    // Tested Formatter
    ///////////////////////////////////////////////////////////////////////////

    BaseFormatter: function(row, cell, value, columnDef, dataContext) {
      var source = columnDef.source;
      var inner_formatter = columnDef.inner_formatter;

      // Retrive info for relation columns
      if (source && typeof value === 'object') {
        value = value[source];
      }

      // Apply format for relation columns
      if (inner_formatter) {
        if (inner_formatter == 'boolean') {
          value = TextBoolCellFormatter(row, cell, eval(value), columnDef, dataContext);
        } else if (typeof(window[inner_formatter]) == 'function') {
          value = window[inner_formatter](row, cell, value, columnDef, dataContext);
        }
      }

      // Apply style
      return applyStyle(value, columnDef.style);
    },

    MoneyFormatter: function(row, cell, value, columnDef, dataContext) {
      var currency = columnDef.currency || "$";
      var text = (value === null || value === undefined || value === '') ? '' : parseFloat(value).toMoney(2, '.', ',') + ' ' + currency;
      return applyStyle(text, columnDef.style || 'text-align:right');
    },

    TextBoolCellFormatter: function(row, cell, value, columnDef, dataContext) {
      var text = value === null ? "" : (value ? 'Yes' : 'No');
      return applyStyle(text, columnDef.style || 'text-align:center');
    },

    GraphicBoolCellFormatter: function(row, cell, value, columnDef, dataContext) {
      var html = value ? '<%= image_tag "tick.png" %>' : '';
      return applyStyle(html, columnDef.style || 'text-align:center');
    },

    ZeroFormatter: function(row, cell, value, columnDef, dataContext) {
      var text = value === 0 ? "" : value;
      return applyStyle(text, columnDef.style || 'text-align:right');
    },

    TooltipFormatter: function(row, cell, value, columnDef, dataContext) {
      return "<div title='" + columnDef.tooltips[value] + "'>" + applyStyle(value, columnDef.style || 'text-align:center') + "</div>";
    },

    // Display datetime info as 'dd/mm/yyyy hh:ms' format
    DateTimeFormatter: function(row, cell, value, columnDef, dataContext) {
      return dateTimeBaseFormatter(value, columnDef, 'DateTime');
    },

    // Display datetime info as 'dd/mm/yyyy' format
    DateFormatter: function(row, cell, value, columnDef, dataContext) {
      return dateTimeBaseFormatter(value, columnDef, 'Date');
    },

    // Display only date info as 'yyyy-mm-dd' format for a datetime column
    OnlyDateFormatter: function(row, cell, value, columnDef, dataContext) {
      if (value === null || value === "") {
        return "";
      } else if ($.isPlainObject(value)) {
        value = value[columnDef.source];
      }

      if (/^\d{4}(\-|\/|\.)\d{1,2}\1\d{1,2}(\s\d{1,2}:\d{1,2})?$/.test(value)) {
        var thedate = $.datepicker.parseDate("yy-mm-dd", value);
        value = thedate.format("yyyy-mm-dd");
      }

      return applyStyle(value, columnDef.style || 'text-align:center');
    },

    ///////////////////////////////////////////////////////////////////////////
    // Existing (Should remove after improvement of DateTimeEditor)
    ///////////////////////////////////////////////////////////////////////////

    // Simple data formatter,display a date as "dd mmm" format, like "21 dec"
    SimpleDateFormatter: function(row, cell, value, columnDef, dataContext) {
      if (value === null || value === "") {
        return "";
      } else if ($.isPlainObject(value)) {
        value = value[columnDef.source];
      }

      if (/^\d{4}(\-|\/|\.)\d{1,2}\1\d{1,2}(\s\d{1,2}:\d{1,2})?$/.test(value)) {
        var thedate = $.datepicker.parseDate("yy-mm-dd", value);
        return thedate.format("dd mmm");
      } else {
        return value;
      }
    },

    SimpleTimeFormatter: function(row, cell, value, columnDef, dataContext) {
      var timeArr;
      if (value === null || value === "") {
        return "";
      } else if ($.isPlainObject(value)) {
        value = value[columnDef.source];
      }

      if (/^(\d{4}(\-|\/|\.)\d{1,2}(\-|\/|\.)\d{1,2}\s)?\d{1,2}:\d{1,2}$/.test(value)) {
        timeArr = value.split(/\s/);
        return timeArr[timeArr.length - 1];
      } else {
        return value;
      }
    },

    // Helpers for simple time/date to support for date format as "12 May/12May", and time format as "12:12/1212"
    ParseSimpleTime: function(simpleTimeStr) {
      try {
        var matchedArr = simpleTimeStr.match(/^(\d{2}):?(\d{2})$/);
        return $.datepicker.parseTime("hh:mm", matchedArr[1] + ":" + matchedArr[2]);
      } catch (err) {
        return null;
      }
    },

    ParseSimpleDate: function(simpleDateStr) {
      try {
        var matchedArr = simpleDateStr.match(/^(\d{2})\s?([A-Za-z]{3})$/);
        return $.datepicker.parseDate("dd M", matchedArr[1] + " " + matchedArr[2]);
      } catch (err) {
        return null;
      }
    }
  };

  $.extend(window, SlickFormatter);

})(jQuery);
